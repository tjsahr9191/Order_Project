name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 21버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ORDER_SERVER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ORDER_SERVER_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build --platform linux/amd64 -t order-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag order-server ${{ steps.login-ecr.outputs.registry }}/order-server:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/order-server:latest

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_ORDER_SERVER_HOST }}
          username: ${{ secrets.EC2_ORDER_SERVER_USERNAME }}
          key: ${{ secrets.EC2_ORDER_SERVER_PRIVATE_KEY }}
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
            RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
            RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          script_stop: true
          script: |
            docker stop order-server || true
            docker rm order-server || true
            docker pull $REGISTRY/order-server:latest
            docker run -d \
              -e RDS_ENDPOINT=$RDS_ENDPOINT \
              -e RDS_USERNAME=$RDS_USERNAME \
              -e RDS_PASSWORD=$RDS_PASSWORD \
              --name order-server -p 8080:8080 $REGISTRY/order-server:latest
            docker image prune -f
            
